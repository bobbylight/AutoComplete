plugins {
    id 'java-library'
}

import static org.gradle.api.JavaVersion.*

['distribution', 'maven-publish', 'signing'].each { apply plugin: it }

assert current().isJava8Compatible()

archivesBaseName = 'autocomplete'

dependencies {
    api 'com.fifesoft:rsyntaxtextarea:3.3.0'
}

ext.isReleaseVersion = !project.version.endsWith('SNAPSHOT')

ext.sharedManifest = manifest {
	attributes('Class-Path': 'rsyntaxtextarea.jar',
		'Specification-Title': 'AutoComplete',
		'Specification-Version': version,
		'Implementation-Title': 'org.fife.ui',
		'Implementation-Version': version)

}

java {
    withSourcesJar()
    withJavadocJar()
}
jar {
	manifest { from sharedManifest }
}

publishing {
	repositories {
        maven {
            def releasesRepoUrl = 'https://oss.sonatype.org/service/local/staging/deploy/maven2/'
            def snapshotsRepoUrl = 'https://oss.sonatype.org/content/repositories/snapshots/'
            url = isReleaseVersion ? releasesRepoUrl : snapshotsRepoUrl
            credentials { // Credentials usually kept in user's .gradle/gradle.properties
                // We must defensively check for these properties so Travis CI build works
                username = project.hasProperty('ossrhUsername') ? ossrhUsername : 'unknown'
                password = project.hasProperty('ossrhPassword') ? ossrhPassword : 'unknown'
            }
        }
    }
    publications {
        maven(MavenPublication) {

            groupId = 'com.fifesoft'
            artifactId = 'autocomplete'
            version = version

            from components.java

            pom {
                name = 'autocomplete'
                description = 'AutoComplete is a library allowing you to add IDE-like auto-completion ' +
                        '(aka "code completion" or "Intellisense") to any Swing JTextComponent. Special integration ' +
                        'is added for RSyntaxTextArea, since this feature is commonly needed when editing source code. ' +
                        'Features include: Drop-down completion choice list. Optional companion "description" window, ' +
                        'complete with full HTML support and navigable with hyperlinks. Optional parameter completion ' +
                        'assistance for functions and methods, ala Eclipse and NetBeans. Completion information is ' +
                        'typically specified in an XML file, but can even be dynamic.'
                url = 'https://github.com/bobbylight/AutoComplete'
                inceptionYear = '2003'
                packaging = 'jar'
                licenses {
                    license {
                        name = 'BSD-3-Clause'
                        url = 'https://github.com/bobbylight/AutoComplete/blob/master/LICENSE.md'
                    }
                }
                developers {
                    developer {
                        name = 'Robert Futrell'
                    }
                }
                scm {
                    url = 'https://github.com/bobbylight/AutoComplete'
                    connection = 'scm:git:git://github.com/bobbylight/AutoComplete'
                    developerConnection = 'scm:git:git@github.com:bobbylight/AutoComplete'
                    if (isReleaseVersion) {
                        tag = project.version
                    }
                }
            }
        }
    }
}

signing {
    // Don't require signing for e.g. ./gradlew install
    required { gradle.taskGraph.hasTask('publish') && isReleaseVersion }
    sign publishing.publications.maven
}
tasks.withType(Sign) {
    onlyIf { isReleaseVersion }
}
